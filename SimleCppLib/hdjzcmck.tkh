#ifndef VECTOR_H
#define VECTOR_H

#include "allocator.h"
#include "TypeTraits.h"
#include "Algorithm.h"
#include "Iterator.h"
#include "uninitialized.h"

namespace LSTL{

	template <class T, class Alloc = allocator<T> >
	class vector{
	public:

		typedef T									value_type;
		typedef T*									iterator;
		typedef const T*							const_iterator;
		typedef iterator							pointer;
		typedef T&									reference;
		typedef const T&							const_reference;
		typedef size_t								size_type;
		typedef ptrdiff_t							difference_type;

	protected:

		typedef Alloc data_allocator;

		iterator start;
		iterator finish;
		iterator end_of_storage;

		///some aux function
		void insert_aux(iterator position, const T& x);
		void deallocate(){
			if (start)
				data_allocator::deallocate(start, end_of_storage - start);
		}
		void fill_initialize(size_type n, const T& value)
		{
			start = allocate_and_fill(n, value);
			finish = start + n;
			end_of_storage = finish;
		}
		iterator allocate_and_fill(size_type n, const T& x)
		{
			iterator result = data_allocator::allocate(n);
			LSTL::uninitialized_fill_n(result, n, x);
			return result;
		}

		void allocate_copy(InputIterator first, InputIterator last){
			start = data_allocator::allocate(last - first);
			finish = LSTL::uninitialized_copy(first, last, start);
			end_of_storage = finish;
		}
		
	/*	void allocate_fill_n(const size_type n, const value_type& value){
			start = data_allocator::allocate(n);
			LSTL::uninitialized_fill_n(start, n, value);
			finish = end_of_storage = start + n;
		}*/

		template<class Integer>
		void vector_aux(Integer n, const value_type& value, std::true_type){
			fill_initialize(n, value);
		}
		template<class InputIterator>
		void vector_aux(InputIterator first, InputIterator last, std::false_type){
			allocate_copy(first,last);
		}



	public:

		///迭代器
		iterator begin(){ return start; }
		iterator end(){ return finish; }
		const_iterator cbegin() const { return start; }
		const_iterator cend() const { return finish; }

		////容量
		size_type size() const { return size_type(end() - begin()); }
		size_type capacity() const { return size_type(end_of_storage() - begin()); }
		bool empty() const { return begin() == end(); }

		


		/////构造函数
		vector() :start(0), finish(0), end_of_storage(0){}
		vector(size_type n, const T& value){ fill_initialize(n, value); }

		vector(int n, const T& value){ fill_initialize(n, value); }
		vector(long n, const T& value){ fill_initialize(n, value); }

		explicit vector(size_type n){ fill_initialize(n, T()); }
		
		
		template<class InputIterator>
		vector(InputIterator first, InputIterator last)
		{
			vector_aux(first, last, typename std::is_integral<InputIterator>::type());
		}

		vector(const vector&v)
		{
			allocate_copy(v.start, v.finish);
		}
		vector(vector &&v)
		{
			start = v.start;
			finish = v.finish;
			end_of_storage = v.end_of_storage;
			v.start = v.finish = v.end_of_storage = 0;
		}
		vector& operator = (const vector& v)
		{
			if (this != &v)
			{
				allocate_copy(v.start, v.finish);
			}
			return *this;
		}
		vector& operator = (vector&& v)
		{
			if (this != &v)
			{
				this->~vector();
				start = v.start;
				finish = v.finish;
				end_of_storage = v.end_of_storage;
				v.start = v.finish = v.end_of_storage = 0;
			}
			return *this;
		}

		~vector()
		{
			destroy(start, finish);
			deallocate();
		}

		//比较操作相关
		bool operator == (const vector& v)const
		{
			if (size() != v.size()){
				return false;
			}
			else{
				auto ptr1 = start;
				auto ptr2 = v.start;
				for (; ptr1 != finish && ptr2 != v.finish; ++ptr1, ++ptr2){
					if (*ptr1 != *ptr2)
						return false;
				}
				return true;
			}

		}
		bool operator != (const vector& v)const
		{
			return !(*this == v);
		}



		///元素访问
		reference operator[] (size_type n){ return *(begin() + n); }
		const_iterator operator[] (const difference_type i) const{ return *(cbegin() + i); }
		reference front() { return *begin(); }
		reference back() { return *(end() - 1); }
		pointer data() { return start; }


		//插入

		void insert(iterator position, const T& x)
		{
			if (finish != end_of_storage)
			{
				construct(finish, *(finish - 1));

				++finish;
				T x_copy = x;
				copy_backward(position, finish - 2, finish - 1);
				*position = x_copy;
			}
			else
			{
				const size_type old_size = size();
				const size_type len = old_size != 0 ? 2 * old_size : 1;

				iterator new_start = data_allocator::allocate(len);
				iterator new_finish = new_start;

				try
				{
					new_finish = uninitialized_copy(start, position, new_start);
					construct(new_finish, x);
					++new_finish;
				}
				catch (...){
					destroy(new_start, new_finish);
					data_allocator::deallocate(new_start, n);
					throw;
				}

				destroy(begin(), end());
				deallocate();
				start = new_start;
				finish = new_finish;
				end_of_storage = new_start + len;
			}
		}

		void insert(iterator position, size_type n, const T&x)
		{
			if (n != 0)
			{
				if (size_type(end_of_storage - finish) >= n)
				{
					T x_copy = x;
					const size_type  elems_after = finish - position;
					iterator old_finish = finish;
					if (elems_after > n)
					{
						uninitialized_copy(finish - n, finish, finish);
						finish += n;
						copy_backward(position, old_finish - n, old_finish);
						fill(position, position + n, x_copy);
					}
					else
					{
						uninitialized_fill_n(finish, n - elems_after, x_copy);
						finish += n - elems_after;
						LSTL::uninitialized_copy(position, old_finish, finish);
						finish += elems_after;
						fill(position, old_finish, x_copy);
					}
				}
				else
				{
					const size_type old_size = size();
					const size_type len = old_size + max(old_size, n);
					iterator new_start = data_allocator::allocate(len);
					iterator new_finish = new_start;

					try{
						new_finish = LSTL::uninitialized_copy(start, position, new_start);
						new_finish = uninitialized_fill_n(new_finish, n, x);
						new_finish = uninitialized_copy(position, finish, new_finish);
					}
					catch
					{
						destroy(new_start, new_finish);
						data_allocator::deallocate(new_start, len);
						throw;
					}
					destroy(start, finish);
					deallocate();
					start = new_start;
					finish = new_finish;
					end_of_storage = new_start + len;
				}

			}
		}

		template <class InputIterator>
		void insert(iterator position, InputIterator first, InputIterator last)
		{
			difference_type spaceleft = end_of_storage - finish;
			difference_type spaceneed = last - first;
			if (spaceleft >0)
			{
				if (spaceleft > spaceneed)
				{
					const size_type  elems_after = finish - position;
					iterator old_finish = finish;
					if (elems_after > spaceneed)
					{
						uninitialized_copy(finish - n, finish, finish);
						finish += n;
						copy_backward(position, old_finish - n, old_finish);
						uninitialized_copy(first, last, position);
					}
					else
					{

					}
				}
			}
		}

		void push_back(const T& x)
		{
			if (!finish != end_of_storage)
			{
				construct(finish, x);
				++finish;
			}
			else
				insert(end(), x);
		}
		void pop_back(){
			--finish;
			destroy(finish);
		}
		iterator erase(iterator position)
		{
			if (position + 1 != end())
				copy(position + 1, finish, position);
			--finish;
			destroy(finish);
			return position;
		}
		iterator erase(iterator first, iterator last)
		{
			difference_type lenOfTail = end() - last;
			//删去的对象数目
			difference_type lenOfRemoved = last - first;
			finish = finish - lenOfRemoved;
			for (; lenOfTail != 0; --lenOfTail){
				auto temp = (last - lenOfRemoved);
				*temp = *(last++);
			}
			return (first);
		}
		void resize(size_type new_size, const T& x)
		{
			if (new_size < size())
				erase(begin() + new_size, end());
			else
				insert(end(), new_size - size(), x);
		}
		void resize(size_type new_size){ resize(new_size, T()); }

		void clear(){ erase(begin(), end()); }

		
	private:



	};




}

#endif
